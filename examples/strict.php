/**
 * できるだけエラー・警告を出さないPHPコードを書く工夫
 *
 * 他環境へ移植しても問題が起こりにくくなるコードを書く
 *
 * @filename strict.php
 * @category Examples
 * @package  ExamplesStrict
 * @author   fromearth
 * @link     https://github.com/fromearth
 */



//-----------------------------------------------------------------
// PHPタグ
//
// 使用するPHPタグ： 開始タグ「<?php」、終了タグ「?>」
// 5.4.0から設定にかかわらず「<?=」使用できるが、
//                               バージョン依存のため使用しない
//-----------------------------------------------------------------



//-----------------------------------------------------------------
// PHP設定
//-----------------------------------------------------------------

// 開発するときは、全エラー・警告を表示させる一番厳しい設定で行う
ini_set('error_reporting', -1); // 本番稼働では0設定し画面表示を抑制
ini_set('display_errors', 1);   // 本番稼働では0設定し画面表示を抑制
ini_set('log_errors', 0);       // 本番稼働では1設定しエラーログ出力させて監視

// 日時を扱う場合は必ず設定
date_default_timezone_set('Asia/Tokyo');



//-----------------------------------------------------------------
// 変数値の判定 / 未定義変数チェックには言語構造(isset empty)を使う
//-----------------------------------------------------------------

// 変数の未定義を常に意識する
if ($_POST['foo']) {                         // ×  fooが送信されなかった場合、設定によっては警告が出る
       ↓
if (isset($_POST['foo']) && $_POST['foo']) { // ○



//-----------------------------------------------------------------
// 制御構造
//-----------------------------------------------------------------

// foreachループ処理には、必ず配列が渡されるようにする
foreach ((array)$var as $key => $value) {

※注意点
foreach ((array)$var as $key => &$value) { // (array)キャストする場合、参照使用不可

// ifブロックに対応するelseブロックも書くよう努力する
if (expr) {
} else {
}

// switch文にはdefaultも書くよう努力する
switch (expr) {
case 'foo':
    break;   // ジャンプ文も忘れないように書く
default:
    break;   // ジャンプ文も忘れないように書く
}



//-----------------------------------------------------------------
// 代入時の注意点
//-----------------------------------------------------------------

// list()への直接代入を避ける。関数が必ず配列の期待する要素数返す保証はない為
list($foo, $bar) = func();    // ×
     ↓
$list = func();               // ○
if (count($list) !== 2) die("func return error");
list($foo, $bar) = $list;



//-----------------------------------------------------------------
// 事前チェック
//-----------------------------------------------------------------
is_readable()  // ファイル読み出しオープン前は、この関数でチェック
is_writable()  // ファイル書き出しオープン前は、この関数でチェック
is_dir()   // ディレクトリが存在する前提で処理する場合は、この関数でチェック
is_file()  // ファイルが存在する前提で処理する場合は、この関数でチェック
file_exists()  // ファイルかディレクトリかに関わらず存在する前提で処理する場合は、この関数でチェック

if (class_exists('ClassName')) {   // クラスがロード済みかチェック

if (function_exists('func_name')) { // 関数が実装されているかチェック



//-----------------------------------------------------------------
// 二重処理への対応
//-----------------------------------------------------------------

// 二重読み込みによるクラスや関数の二重宣言エラーを回避するためにrequire_onceを使って呼び出す
// もしくはオートローダーを実装しておき require系 include系 は一切使わない
require_once '/path/to/phpfile';

// 定数がすでに定義されているか defined() でチェック
if (!defined('FOO')) define('FOO', 1);



//-----------------------------------------------------------------
// 比較
//-----------------------------------------------------------------

// 曖昧比較が有効なケース
if ($id === "5" || $id === 5) { // 文法○。可読性×
if ((int)$id === 5) {           // 文法○。可読性△
        ↓
if ($id == 5) {                 // 文法○。可読性○




// 厳密比較が有効なケース
if ($id == 0) {                 // 意図しない処理になる可能性 (0以外の空文字やnull値の場合も条件を満たしてしまう）
        ↓
if ((string)$id === '0') {      // こうしようか迷うところではあるが、そもそも 0 をパラメータ値として使わないようコード設計の段階で決めておくことが望ましい


if (!$dp=opendir('/path/to/dir')) die("opendir error");
while (($file=readdir($dp)) !== false) {  // ファイル名が 0 の場合に != と書くと誤動作

}
closedir($dp);


if (strpos($data, 'foo') >= 0) {      // ×  検索文字列fooが無くても条件を満たしてしまう
           ↓
if (strpos($data, 'foo') !== false) { // ○



//-----------------------------------------------------------------
// 演算
//-----------------------------------------------------------------

// 0で割る可能性があれば回避
if ($inputValue > 0) {
    $result = $num / $inputValue;
} else {
    $result = 0;
}



//-----------------------------------------------------------------
// 型キャスト
//-----------------------------------------------------------------

// 送信データ取得時
if (isset($_POST['user_id'])) {
    $uesrId = (int)$_POST['user_id'];  // 数値データは(int)キャストしておく
} else {
    die("parameter error");
}


